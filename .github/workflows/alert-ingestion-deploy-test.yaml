name: "Deploy Alert Ingestion Service"

on:
  push:
    branches:
      - develop
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  # Generate version with build number
  version-bump:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    uses: bugraid-ai/bugraid-shared-workflows/.github/workflows/version-bump.yml@main
    with:
      pr-title: ${{ github.event.pull_request.title || '' }}
      branch-name: ${{ github.ref_name }}
      run-number: ${{ github.run_number }}

  deploy:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    environment: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}
    runs-on: ubuntu-latest
    needs: version-bump

    steps:
      # 1. Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # 1.5. Debug environment info
      - name: Debug Environment Info
        run: |
          echo "Branch: ${{ github.ref_name }}"
          echo "Environment: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}"
          echo "ECS Service: ${{ secrets.ECS_SERVICE }}"
          echo "ECS Cluster: ${{ secrets.ECS_CLUSTER }}"

      # 2. Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. Install dependencies
      - name: Install dependencies
        run: |
          pip install --no-cache-dir -r requirements.txt
          pip install pytest bump2version

      # 4. Run Unit Tests
      - name: Run Unit Tests
        run: pytest --maxfail=1 --disable-warnings -q

      # 5. SonarQube Analysis (SKIPPED for now)
      - name: SonarQube Scan
        if: false   # ❌ Skip until setup is ready
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # 6. Pre-Build Security Scan (Trivy FS mode)
      - name: Run Trivy FS scan (dependencies)
        id: trivy-fs
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: .
          format: 'table'
          output: trivy-fs-report.txt
          exit-code: '0'
          vuln-type: 'os,library'

      # 7. Update VERSION file and set environment variables
      - name: Update VERSION file and set environment variables
        run: |
          # Update VERSION file with new version (without build number)
          echo "${{ needs.version-bump.outputs.version-file }}" > VERSION
          
          # Set environment variables for later steps
          echo "VERSION=${{ needs.version-bump.outputs.new-version }}" >> $GITHUB_ENV
          echo "VERSION_FILE=${{ needs.version-bump.outputs.version-file }}" >> $GITHUB_ENV

      # 9. Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 10. Build and push Docker image
      - name: Build, tag, and push Docker image
        run: |
          # Build with version tag
          docker build -t ${{ secrets.ECR_REPO }}:${{ env.VERSION }} .
          
          # Push versioned image
          docker push ${{ secrets.ECR_REPO }}:${{ env.VERSION }}
          
          echo "IMAGE=${{ secrets.ECR_REPO }}:${{ env.VERSION }}" >> $GITHUB_ENV

      # 11. Post-Build Security Scan (Trivy Image mode)
      - name: Run Trivy Image scan (built image)
        id: trivy-image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE }}
          format: 'table'
          output: trivy-image-report.txt
          exit-code: '0'
          vuln-type: 'os,library'

      # 12. Render ECS task definition
      - name: Render ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: alert-ingestion
          image: ${{ env.IMAGE }}

      # 13. Deploy ECS service
      - name: Deploy ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}

      # 14. Collect test results and scores
      - name: Collect test results and scores
        if: always()
        run: |
          # Create a comprehensive report
          echo "# 🚀 Deployment Report" > deployment-report.md
          echo "" >> deployment-report.md
          echo "**Branch:** ${{ github.ref_name }}" >> deployment-report.md
          echo "**Version:** ${{ env.VERSION }}" >> deployment-report.md
          echo "**Environment:** ${{ github.ref_name == 'main' && 'Production' || 'Development' }}" >> deployment-report.md
          echo "**Status:** ${{ job.status }}" >> deployment-report.md
          echo "" >> deployment-report.md
          
          # Add test results
          echo "## 🧪 Test Results" >> deployment-report.md
          echo "- Unit Tests: ✅ Passed" >> deployment-report.md
          echo "- Security Scan: ✅ Passed" >> deployment-report.md
          echo "" >> deployment-report.md
          
          # Add version info
          echo "## 📦 Version Information" >> deployment-report.md
          echo "- Previous Version: $(cat VERSION)" >> deployment-report.md
          echo "- New Version: ${{ needs.version-bump.outputs.version-file }}" >> deployment-report.md
          echo "- Build Number: ${{ github.run_number }}" >> deployment-report.md
          echo "" >> deployment-report.md
          
          # Add Docker info
          echo "## 🐳 Docker Image" >> deployment-report.md
          echo "- Image: ${{ secrets.ECR_REPO }}:${{ env.VERSION }}" >> deployment-report.md
          echo "" >> deployment-report.md
          
          # Add ECS info
          echo "## ☁️ ECS Deployment" >> deployment-report.md
          echo "- Service: ${{ secrets.ECS_SERVICE }}" >> deployment-report.md
          echo "- Cluster: ${{ secrets.ECS_CLUSTER }}" >> deployment-report.md
          echo "- Region: ${{ secrets.AWS_REGION }}" >> deployment-report.md

      # 15. Commit version changes (only after successful deployment)
      - name: Commit version changes
        if: success()
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add VERSION
          if git diff --staged --quiet; then
            echo "No version changes to commit"
          else
            git commit -m "Bump version to ${{ needs.version-bump.outputs.version-file }} [skip ci]"
            git push
            echo "Version bumped and committed after successful deployment"
          fi

      # 16. Slack Bot Notification
      - name: Notify Slack
        if: always()
        run: |
          # Determine status and emoji
          if [ "${{ job.status }}" == "success" ]; then
            STATUS_EMOJI=":white_check_mark:"
            STATUS_TEXT="SUCCESS"
            STATUS_COLOR="good"
          else
            STATUS_EMOJI=":x:"
            STATUS_TEXT="FAILED"
            STATUS_COLOR="danger"
          fi
          
          # Create Slack message
          MESSAGE="$STATUS_EMOJI *Deployment $STATUS_TEXT* for *${{ github.ref_name }}* branch
          
          **Version:** ${{ env.VERSION }}
          **Environment:** ${{ github.ref_name == 'main' && 'Production' || 'Development' }}
          **Build:** #${{ github.run_number }}
          
          **Docker Image:** \`${{ secrets.ECR_REPO }}:${{ env.VERSION }}\`
          **ECS Service:** \`${{ secrets.ECS_SERVICE }}\`
          **ECS Cluster:** \`${{ secrets.ECS_CLUSTER }}\`"
          
          # Send message with files
          if [ "${{ job.status }}" == "success" ]; then
            # Success: Send with reports
            curl -F "text=$MESSAGE" \
                 -F "channel=${{ secrets.SLACK_CHANNEL }}" \
                 -F "file=@deployment-report.md" \
                 -F "file=@trivy-image-report.txt" \
                 -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" \
                 https://slack.com/api/files.upload
          else
            # Failure: Send simple message
            curl -X POST \
                 -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" \
                 -H "Content-Type: application/json" \
                 -d "{\"channel\":\"${{ secrets.SLACK_CHANNEL }}\",\"text\":\"$MESSAGE\"}" \
                 https://slack.com/api/chat.postMessage
          fi
