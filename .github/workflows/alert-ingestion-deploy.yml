name: "Deploy Alert Ingestion Service"

on:
  push:
    branches:
      - develop
      - main

env:
  AWS_REGION: ap-southeast-1  

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 3. Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 4. Set environment (branch â†’ env mapping)
      - name: Set environment
        run: |
          if [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            echo "DEPLOY_ENV=prod" >> $GITHUB_ENV
            echo "ECR_REPO=${{ secrets.ECR_PROD_ALERT_INGESTION }}" >> $GITHUB_ENV
            echo "ECS_CLUSTER=${{ secrets.ECS_CLUSTER_PROD }}" >> $GITHUB_ENV
            echo "ECS_SERVICE=${{ secrets.ECS_SERVICE_ALERT_INGESTION_PROD }}" >> $GITHUB_ENV
          else
            echo "DEPLOY_ENV=dev" >> $GITHUB_ENV
            echo "ECR_REPO=${{ secrets.ECR_DEV_ALERT_INGESTION }}" >> $GITHUB_ENV
            echo "ECS_CLUSTER=${{ secrets.ECS_CLUSTER_DEV }}" >> $GITHUB_ENV
            echo "ECS_SERVICE=${{ secrets.ECS_SERVICE_ALERT_INGESTION_DEV }}" >> $GITHUB_ENV
          fi

      # 5. Build and push Docker image
      - name: Build, tag, and push Docker image
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}
          docker build -t $ECR_REPO:$IMAGE_TAG .
          docker push $ECR_REPO:$IMAGE_TAG
          echo "IMAGE=$ECR_REPO:$IMAGE_TAG" >> $GITHUB_ENV

      # 6. Render ECS task definition
      - name: Render ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json    
          container-name: alert-ingestion      
          image: ${{ env.IMAGE }}

      # 7. Deploy ECS service
      - name: Deploy ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
