name: build-and-push-ai-ml

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        type: choice
        options: [dev, prd]
      service:
        description: "ECS Service to build for"
        required: true
        type: choice
        options: [alert-ingestion, anomaly-detection-dev, context-fetcher]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.export.outputs.image }}
      environment: ${{ steps.export.outputs.environment }}
      service: ${{ steps.export.outputs.service }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set environment
        run: |
          echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          echo "SERVICE=${{ github.event.inputs.service }}" >> $GITHUB_ENV

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set version
        run: echo "VERSION=v1.0.0.${{ github.run_number }}" >> $GITHUB_ENV

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push
        run: |
          if [ "${{ env.ENVIRONMENT }}" = "prd" ]; then
            ECR_REPO=${{ secrets.PRD_ECR_REPO }}
          else
            ECR_REPO=${{ secrets.DEV_ECR_REPO }}
          fi
          IMAGE_TAG=${{ env.SERVICE }}-${{ env.VERSION }}
          IMAGE="$ECR_REPO:$IMAGE_TAG"
          docker build -t "$IMAGE" .
          docker push "$IMAGE"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - id: export
        run: |
          echo "image=${{ env.IMAGE }}" >> $GITHUB_OUTPUT
          echo "environment=${{ env.ENVIRONMENT }}" >> $GITHUB_OUTPUT
          echo "service=${{ env.SERVICE }}" >> $GITHUB_OUTPUT

      - name: Notify Slack
        run: |
          curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" \
            -H "Content-type: application/json" \
            --data "{\"channel\":\"${{ secrets.SLACK_CHANNEL }}\",\"text\":\":white_check_mark: Build SUCCESS for *${{ env.SERVICE }}* in *${{ env.ENVIRONMENT }}*\"}" \
            https://slack.com/api/chat.postMessage

  deploy:
    needs: build
    uses: ./.github/workflows/deploy-ecs-ai-ml.yml
    with:
      image: ${{ needs.build.outputs.image }}
      environment: ${{ needs.build.outputs.environment }}
      service: ${{ needs.build.outputs.service }}
    secrets: inherit
