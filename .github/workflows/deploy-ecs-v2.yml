name: deploy-ecs-ai-ml

on:
  workflow_run:
    workflows: ["build-and-push-ai-ml"]
    types:
      - completed

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Install GitHub CLI and jq
        run: sudo apt update && sudo apt install -y gh jq

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get Pipeline 1 outputs
        id: get-outputs
        run: |
          RUN_ID=${{ github.event.workflow_run.id }}

          # Get the outputs of the 'build' job from Pipeline 1
          OUTPUTS=$(gh api repos/${{ github.repository }}/actions/runs/$RUN_ID | jq -r '.jobs[] | select(.name=="build") | .steps[] | select(.name=="export") | .outputs')

          IMAGE=$(echo "$OUTPUTS" | jq -r '.image')
          SERVICE=$(echo "$OUTPUTS" | jq -r '.service')
          ENVIRONMENT=$(echo "$OUTPUTS" | jq -r '.environment')

          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          echo "SERVICE=$SERVICE" >> $GITHUB_ENV
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Determine ECS Cluster
        run: |
          if [ "${{ env.ENVIRONMENT }}" = "prd" ]; then
            echo "ECS_CLUSTER=${{ secrets.PRD_ECS_CLUSTER }}" >> $GITHUB_ENV
          else
            echo "ECS_CLUSTER=${{ secrets.DEV_ECS_CLUSTER }}" >> $GITHUB_ENV

      - name: Render ECS Task Definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.SERVICE }}
          image: ${{ env.IMAGE }}

      - name: Deploy ECS Service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Notify Slack
        if: always()
        run: |
          STATUS_TEXT="FAILED"; STATUS_EMOJI=":x:"
          if [ "${{ job.status }}" == "success" ]; then
            STATUS_TEXT="SUCCESS"; STATUS_EMOJI=":white_check_mark:"
          fi

          MESSAGE="$STATUS_EMOJI *Deploy $STATUS_TEXT* for *${{ env.SERVICE }}*  
          Environment: ${{ env.ENVIRONMENT }}  
          Image: ${{ env.IMAGE }}  
          Cluster: ${{ env.ECS_CLUSTER }}"

          curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" \
            -H "Content-type: application/json" \
            --data "{\"channel\":\"${{ secrets.SLACK_CHANNEL }}\",\"text\":\"$MESSAGE\"}" \
            https://slack.com/api/chat.postMessage
