name: "Deploy ECS Service (AI-ML)"

on:
  workflow_dispatch:
    branches:
      - develop
    inputs:
      environment:
        description: "Target environment"
        required: true
        type: choice
        options:
          - develop
          - prd
      service:
        description: "ECS Service to deploy"
        required: true
        type: choice
        options:
          - alert-ingestion
          - anomaly-detection-dev
          - context-fetcher

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Fetch latest image tag from ECR
        id: latest-image
        run: |
          if [ "${{ github.event.inputs.environment }}" = "prd" ]; then
            REPO=${{ secrets.PRD_ECR_REPO }}
          else
            REPO=${{ secrets.DEV_ECR_REPO }}
          fi

          echo "Fetching latest image tag from ECR: $REPO"

          LATEST_TAG=$(aws ecr describe-images \
            --repository-name $REPO \
            --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' \
            --output text)

          if [ "$LATEST_TAG" = "None" ] || [ -z "$LATEST_TAG" ]; then
            echo "❌ No images found in $REPO"
            exit 1
          fi

          echo "Latest image tag: $LATEST_TAG"
          echo "IMAGE_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Set ECS Cluster & Service
        run: |
          ENV="${{ github.event.inputs.environment }}"
          SERVICE="${{ github.event.inputs.service }}"
          IMAGE_TAG="${{ env.IMAGE_TAG }}"

          if [ "$ENV" = "prd" ]; then
            ECS_CLUSTER=${{ secrets.PRD_ECS_CLUSTER }}
            ECR_REPO=${{ secrets.PRD_ECR_REPO }}
          else
            ECS_CLUSTER=${{ secrets.DEV_ECS_CLUSTER }}
            ECR_REPO=${{ secrets.DEV_ECR_REPO }}
          fi

          ECS_SERVICE=$SERVICE
          IMAGE=$ECR_REPO/$SERVICE:$IMAGE_TAG

          echo "ECS_CLUSTER=$ECS_CLUSTER" >> $GITHUB_ENV
          echo "ECS_SERVICE=$ECS_SERVICE" >> $GITHUB_ENV
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          echo "ENVIRONMENT=$ENV" >> $GITHUB_ENV
          echo "SERVICE=$SERVICE" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Render ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.SERVICE }}
          image: ${{ env.IMAGE }}

      - name: Deploy ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Notify Slack
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            STATUS_EMOJI=":white_check_mark:"
            STATUS_TEXT="SUCCESS"
          else
            STATUS_EMOJI=":x:"
            STATUS_TEXT="FAILED"
          fi

          MESSAGE="$STATUS_EMOJI *Deploy $STATUS_TEXT* for *${{ env.SERVICE }}*  
          Environment: ${{ env.ENVIRONMENT }}  
          Image: ${{ env.IMAGE }}  
          Image Tag: ${{ env.IMAGE_TAG }}  
          Cluster: ${{ env.ECS_CLUSTER }}  
          Service: ${{ env.ECS_SERVICE }}"

          curl -F "text=$MESSAGE" \
               -F "channel=${{ secrets.SLACK_CHANNEL }}" \
               -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" \
               https://slack.com/api/chat.postMessage
