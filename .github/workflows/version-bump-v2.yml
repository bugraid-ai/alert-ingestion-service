# DISABLED: Version bump workflow - using manual versioning instead
name: "version-bump-ai-ml-disabled"

# on:
#   workflow_call:
#     inputs:
#       pr-title:
#         description: 'Pull request title'
#         required: false
#         type: string
#         default: ''
#       branch-name:
#         description: 'Branch name'
#         required: true
#         type: string
#       run-number:
#         description: 'GitHub run number'
#         required: true
#         type: string
#     outputs:
#       new-version:
#         description: 'New version with build number'
#         value: ${{ jobs.version-bump.outputs.new-version }}
#       version-file:
#         description: 'Version without build number'
#         value: ${{ jobs.version-bump.outputs.version-file }}
#     secrets: inherit

# jobs:
#   version-bump:
#     runs-on: ubuntu-latest
#     outputs:
#       new-version: ${{ steps.version.outputs.new-version }}
#       version-file: ${{ steps.version.outputs.version-file }}

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4
      
#       - name: Generate version with build number
#         id: version
#         run: |
#           # Read current version
#           if [ ! -f VERSION ]; then
#             echo "v1.0.0" > VERSION
#           fi
#           CURRENT_VERSION=$(cat VERSION)
#           echo "Current version: $CURRENT_VERSION"
          
#           # Extract major.minor.patch
#           if [[ $CURRENT_VERSION =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
#             MAJOR=${BASH_REMATCH[1]}
#             MINOR=${BASH_REMATCH[2]}
#             PATCH=${BASH_REMATCH[3]}
#           else
#             MAJOR=1
#             MINOR=0
#             PATCH=0
#           fi
          
#           # Determine version bump based on branch and PR title
#           if [[ "${{ inputs.branch-name }}" == "main" ]]; then
#             PR_TITLE="${{ inputs.pr-title }}"
#             if [[ "$PR_TITLE" =~ ^(feat|feature): ]]; then
#               MINOR=$((MINOR + 1))
#               PATCH=0
#               echo "Feature merge - bumping minor version"
#             elif [[ "$PR_TITLE" =~ ^(hotfix|fix): ]]; then
#               PATCH=$((PATCH + 1))
#               echo "Hotfix merge - bumping patch version"
#             elif [[ "$PR_TITLE" =~ ^(release|major): ]]; then
#               MAJOR=$((MAJOR + 1))
#               MINOR=0
#               PATCH=0
#               echo "Release merge - bumping major version"
#             else
#               PATCH=$((PATCH + 1))
#               echo "Default merge - bumping patch version"
#             fi
#           else
#             echo "Develop branch - keeping same version"
#           fi
          
#           # Generate new version with build number
#           BUILD_NUMBER="${{ inputs.run-number }}"
#           NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}.${BUILD_NUMBER}"
#           VERSION_FILE="v${MAJOR}.${MINOR}.${PATCH}"
          
#           echo "New version: $NEW_VERSION"
#           echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
#           echo "version-file=$VERSION_FILE" >> $GITHUB_OUTPUT
